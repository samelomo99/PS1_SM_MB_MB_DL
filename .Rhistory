y_ingLab_m_ha,
sex,
age,
maxEducLevel,
p6050,
estrato1,
oficio,
relab,
formal,
informal,
sizeFirm,
cotPension,
ocu,
)
# Visualizar la estructura de la nueva base de datos
str(datos)
datos <- datos %>%
mutate(flag = ifelse(age <= 6, 1, 0))
# Calcular el número total de menores por hogar (identificado por 'directorio' y 'secuencia_p')
datos <- datos %>%
group_by(directorio, secuencia_p) %>%
mutate(nmenores = sum(flag)) %>%
dplyr::select(-flag) %>%
ungroup()
# Verificar el resultado mostrando las últimas filas
datos %>%
dplyr::select(directorio, secuencia_p, age, nmenores) %>%
head(10) %>%
View()
# JEFE DEL HOGAR
datos <- datos %>%
mutate(H_Head = ifelse( p6050== 1, 1, 0))
table(datos$H_Head)
# Renombramos la variable sex=gender (Nota. gender: 0=mujer 1=hombre)
datos <- as_tibble(datos) %>% rename(gender=sex)
# Creamos la variable de jefe de hogar mujer
datos <- datos %>%
mutate(Head_Female = H_Head*(1-gender))
table(datos$Head_Female)
table(datos$gender)
# Filtramos por mayores (o iguales) a 18 y por personas ocupadas.
datos <- datos %>% filter(age >= 18, ocu == 1)
summary(datos$age) # Comprobamos que el mínimo es 18 años.
# Pasamos el data.frame a tibble
datos <- as_tibble(datos)
head(datos)
skim_data <- skim(datos)
View(skim_data) # abrirlo en el visor de datos
# Se revisa la estructura del dataframe (con glimpse y resumen estadístico básico (summary).
glimpse(datos)
summary(datos)
# Resumen de los datos - Summary Tools
resumen <- dfSummary(datos, style = "grid", plain.ascii = FALSE)
print(resumen, method = "browser")
# Tratamiento NA / Missing Values
skim_data <- as_tibble(skim(datos))  # Forzar a tibble
db_miss <- skim_data %>% dplyr::select(skim_variable, n_missing)
# Visualización
# a) ggplot
library(ggplot2)
db_miss %>%
filter(n_missing > 0) %>%  # Filtra solo variables con valores perdidos
ggplot(aes(x = reorder(skim_variable, +n_missing), y = n_missing)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
coord_flip() +
labs(title = "N Missing Per Variable", x = "Var Name", y = "Missings") +
theme(axis.text = element_text(size = 5))
# b) Con DataExplorer: gráfico de missing values
datos_filtrados <- datos %>% select_if(~ sum(is.na(.)) > 0) # Filtra solo variables con NA
plot_missing(datos_filtrados)
pdf("plot_missing_val.pdf", width = 8, height = 6)
plot_missing(datos_filtrados)
dev.off()  # Cierra el dispositivo PDF
ggplot(datos, aes(maxEducLevel)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
ggtitle("Max Edu  Distribution") +
theme_classic() +
theme(plot.title = element_text(size = 18))
mode_edu <- as.numeric(names(sort(table(datos$maxEducLevel), decreasing = TRUE)[1]))
# Corregimos el Missing Value
datos <- datos  %>%
mutate(maxEducLevel_im = ifelse(is.na(maxEducLevel) == TRUE, mode_edu , maxEducLevel))
table(datos$cotPension)
datos <- datos %>%
mutate(pension_status = case_when(
cotPension == 3 & ((gender == 0 & age <= 56) | (gender == 1 & age <= 61)) ~ 1,
cotPension == 3 & ((gender == 0 & age >= 57) | (gender == 1 & age >= 62)) ~ 2,
cotPension %in% c(1, 2) ~ 3,
TRUE ~ 3
))
table(datos$pension_status)
# crosstab entre pensionados validos (2) y no valido(1) y relab
tabla_cruzada <- datos %>%
filter(pension_status %in% c(1, 2)) %>%
with(table(relab, pension_status))
print(tabla_cruzada)
# crosstab entre ingreso y pension status
resumen <- datos %>%
filter(pension_status %in% c(1, 2)) %>%
group_by(pension_status) %>%
summarise(
n_con_info = sum(!is.na(y_ingLab_m_ha)),
n_sin_info = sum(is.na(y_ingLab_m_ha))
)
print(resumen)
#crosstab entre pension_status y relab
tabla_cruzada <- with(datos[datos$pension_status %in% c(1, 2), ], table(pension_status, relab))
print(tabla_cruzada)
resumen <- datos %>%
filter(pension_status %in% c(1, 2)) %>%
mutate(info_ingreso = ifelse(is.na(y_ingLab_m_ha), "Sin info", "Con info")) %>%
group_by(pension_status, info_ingreso) %>%
summarise(cantidad = n(), .groups = "drop")
print(resumen)
table(datos$cotPension)
#recodificamos cotPension=1 cuando pension_status=1
datos <- datos %>%
mutate(cotPension_im = ifelse(pension_status == 1, 1, cotPension))
table(datos$cotPension_im)
tabla_resumen <- datos %>%
filter(relab %in% c(6, 7)) %>%
group_by(relab, missing = is.na(y_ingLab_m_ha)) %>%
summarise(cantidad = n(), .groups = "drop")
print(tabla_resumen)
#se eliminan los casos donde relab 6 o 7 (no remuerado) y no tiene informacion deingresos
datos <- datos %>%
filter(!(relab %in% c(6, 7) & is.na(y_ingLab_m_ha)))
# Numero de missing de la variable
is.na(datos$y_ingLab_m_ha) %>% table()
ggplot(datos, aes(y_ingLab_m_ha)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(datos$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(datos$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle("labor income salaried - nomial hourly - all occ+tip+comis") +
theme_classic() +
theme(plot.title = element_text(size = 18))
trabj_noremuner <- subset(datos, relab == 6 & is.na(y_ingLab_m_ha))
cantidad <- nrow(trabj_noremuner)
print(paste("La cantidad de personas con relab=6 y y_ingLab_m_ha missing es:", cantidad))
#dado que la distribucion de la variable tiene una cola larga a la derecha es mas adecuado usar la mediana
# como metodo para imputar observaciones faltantes
datos <- datos  %>%
mutate(y_ingLab_m_ha_im = ifelse(is.na(y_ingLab_m_ha) == TRUE, median(datos$y_ingLab_m_ha, na.rm = TRUE) , y_ingLab_m_ha))
ggplot(datos, aes(y_ingLab_m_ha_im)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(datos$y_ingLab_m_ha_im, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(datos$y_ingLab_m_ha_im, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle("labor income salaried - nomial hourly - all occ+tip+comis") +
theme_classic() +
theme(plot.title = element_text(size = 18))
summary(datos[, c("y_ingLab_m_ha_im", "y_ingLab_m_ha")])
# No obstante, creamos otra variable con el uso de media como reemplazo de NA
datos <- datos  %>%
mutate(y_ingLab_m_ha_mean = ifelse(is.na(y_ingLab_m_ha) == TRUE, mean(datos$y_ingLab_m_ha, na.rm = TRUE) , y_ingLab_m_ha))
ggplot(datos, aes(y_ingLab_m_ha_mean)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(datos$y_ingLab_m_ha_im, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(datos$y_ingLab_m_ha_im, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle("labor income salaried - nomial hourly - all occ+tip+comis") +
theme_classic() +
theme(plot.title = element_text(size = 18))
summary(datos[, c("y_ingLab_m_ha_mean", "y_ingLab_m_ha")])
# Definimos los umbrales para marcar outliers (1% y 99%)
p_inferior <- 0.01
p_superior <- 0.99
umbral_inferior <- quantile(datos$y_ingLab_m_ha_im, probs = p_inferior, na.rm = TRUE)
umbral_superior <- quantile(datos$y_ingLab_m_ha_im, probs = p_superior, na.rm = TRUE)
# Filtrar registros que están por debajo o por encima de dichos umbrales
extremos <- datos %>%
filter(y_ingLab_m_ha_im < umbral_inferior | y_ingLab_m_ha_im > umbral_superior)
n_extremos <- nrow(extremos)
cat("Número de registros outliers (1% - 99%):", n_extremos, "\n")
summary(extremos$y_ingLab_m_ha_im)
# Revisión específica del límite inferior
extremos_inferior <- datos %>%
filter(y_ingLab_m_ha_im < umbral_inferior)
n_inferior <- nrow(extremos_inferior)
cat("Número de observaciones por debajo del límite inferior (1%):", n_inferior, "\n")
summary(extremos_inferior$y_ingLab_m_ha_im)
# Resumen de outliers por oficio
tabla_extremos_oficio <- table(extremos$oficio)
print(tabla_extremos_oficio)
resumen_extremos_oficio <- extremos %>%
group_by(oficio) %>%
summarise(
count        = n(),
mean_outlier = mean(y_ingLab_m_ha_im, na.rm = TRUE),
max_outlier  = max(y_ingLab_m_ha_im, na.rm = TRUE)
)
print(resumen_extremos_oficio)
# Boxplot con líneas de percentil 1% y 99%
b <- ggplot(data = datos, aes(x = "", y = y_ingLab_m_ha_im)) +
geom_boxplot() +
theme_bw() +
ggtitle("y_ingLab_m_ha_im (Escala original:
percentil 1% y 99%)") +
ylab("Ingreso por hora (original)") +
xlab("") +
geom_hline(yintercept = umbral_inferior, linetype = "solid", color = "blue", linewidth = 0.7) +
geom_hline(yintercept = umbral_superior, linetype = "solid", color = "blue", linewidth = 0.7)
# Boxplot con líneas de media ± 2*sd
mean_val <- mean(datos$y_ingLab_m_ha_im, na.rm = TRUE)
sd_val   <- sd(datos$y_ingLab_m_ha_im, na.rm = TRUE)
low_2sd  <- mean_val - 2 * sd_val
up_2sd   <- mean_val + 2 * sd_val
c <- ggplot(data = datos, aes(x = "", y = y_ingLab_m_ha_im)) +
geom_boxplot() +
theme_bw() +
ggtitle("Boxplot (Media ± 2*SD) - Escala original") +
ylab("Ingreso por hora (original)") +
xlab("") +
geom_hline(yintercept = low_2sd, linetype = "solid", color = "red", size = 0.7) +
geom_hline(yintercept = up_2sd,  linetype = "solid", color = "red", size = 0.7)
grid.arrange(b, c, ncol = 2)
# Marcar outliers en la base de datos (según media ± 2*sd, por ejemplo)
datos <- datos %>%
mutate(out_y_ingLab_m_ha_im = ifelse(y_ingLab_m_ha_im < low_2sd | y_ingLab_m_ha_im > up_2sd, 1, 0))
# Boxplot con percentiles 1% y 99% (escala log)
plot1 <- ggplot(datos, aes(x = "", y = y_ingLab_m_ha_im)) +
geom_boxplot() +
scale_y_log10() +
theme_bw() +
ggtitle("y_ingLab_m_ha_im(Escala log):
Percentiles 1% y 99%") +
ylab("Salario por hora (log10)") +
xlab("") +
geom_hline(yintercept = umbral_inferior, linetype = "solid", color = "blue", size = 0.7) +
geom_hline(yintercept = umbral_superior, linetype = "solid", color = "blue", size = 0.7)
# Boxplot con media ± 2*sd calculados sobre los datos log
log_data <- log10(datos$y_ingLab_m_ha_im)
mean_log <- mean(log_data, na.rm = TRUE)
sd_log   <- sd(log_data, na.rm = TRUE)
low_log  <- 10^(mean_log - 2 * sd_log)
up_log   <- 10^(mean_log + 2 * sd_log)
plot2 <- ggplot(datos, aes(x = "", y = y_ingLab_m_ha_im)) +
geom_boxplot() +
scale_y_log10() +
theme_bw() +
ggtitle("Boxplot (Media ± 2*SD) - Escala log") +
ylab("Salario por hora (log10)") +
xlab("") +
geom_hline(yintercept = low_log, linetype = "solid", color = "red", size = 0.7) +
geom_hline(yintercept = up_log,  linetype = "solid", color = "red", size = 0.7)
grid.arrange(plot1, plot2, ncol = 2)
extremos_inferior$y_ingLab_m_ha_im
# Calcular el valor del percentil 5
p5 <- quantile(datos$y_ingLab_m_ha_im, 0.05, na.rm = TRUE)
# Filtrar las observaciones que estén en o por debajo de ese valor
ingreso_p5 <- datos %>%
filter(y_ingLab_m_ha_im <= p5)
# Ver cuántos registros hay y revisar sus valores
nrow(ingreso_p5)
summary(ingreso_p5$y_ingLab_m_ha_im)
#Crear la variable winsorizada solo para la cola inferior
datos <- datos %>%
mutate(y_ingLab_m_ha_wins = ifelse(
y_ingLab_m_ha_im < p5, p5, y_ingLab_m_ha_im
))
#Comparar estadísticas entre la variable original y la variable recortada
summary(datos$y_ingLab_m_ha_im)
summary(datos$y_ingLab_m_ha_wins)
#visualizando el boxplot de nuestra variable de resultado: ingreso windzorizada
ggplot(datos, aes(x = y_ingLab_m_ha_wins)) +
geom_histogram(aes(y = ..density..),
bins = 30,
fill = "skyblue",
color = "black",
alpha = 0.7) +
geom_density(color = "red", size = 1) +
labs(title = "Distribución del Ingreso Laboral (y_ingLab_m_ha_wins)",
x = "Ingreso laboral por hora",
y = "Densidad") +
theme_minimal() +
scale_x_continuous(trans = "log10")  # Escala logarítmica en eje x, opcional
##bloxplot ingreso
umbral_inferior <- quantile(datos$y_ingLab_m_ha_wins, probs = 0.01, na.rm = TRUE)
umbral_superior <- quantile(datos$y_ingLab_m_ha_wins, probs = 0.99, na.rm = TRUE)
# escala original (percentiles 1% y 99%)
e <- ggplot(datos, aes(x = "", y = y_ingLab_m_ha_wins)) +
geom_boxplot() +
theme_bw() +
ggtitle("y_ingLab_m_ha_wins Escala original):
Percentil 1% y 99%") +
ylab("Ingreso por hora (original)") +
xlab("") +
geom_hline(yintercept = umbral_inferior, linetype = "solid",
color = "blue", linewidth = 0.7) +
geom_hline(yintercept = umbral_superior, linetype = "solid",
color = "blue", linewidth = 0.7)
e_log <- ggplot(datos, aes(x = "", y = y_ingLab_m_ha_wins)) +
geom_boxplot() +
scale_y_log10() +  # <-- Escala logarítmica para manejar asimetrías
theme_bw() +
ggtitle("y_ingLab_m_ha_wins(Escala log):
Percentil 1% y 99%") +
ylab("Ingreso por hora (log)") +
xlab("") +
geom_hline(yintercept = umbral_inferior, linetype = "solid",
color = "blue", linewidth = 0.7) +
geom_hline(yintercept = umbral_superior, linetype = "solid",
color = "blue", linewidth = 0.7)
combined_plot <- grid.arrange(e, e_log,ncol = 2)
ggsave("boxplots_ing.pdf",plot   = combined_plot,device = "pdf",width  = 10,height = 8)
##combinando todas las graficas
combined_plot_all <-grid.arrange(b,plot1, e, e_log, ncol = 2)
ggsave("boxplots_ing_all.pdf",plot   = combined_plot_all,device = "pdf",width  = 10,height = 8)
variables_seleccionadas <- c("y_ingLab_m_ha_wins", "nmenores", "age",
"gender", "estrato1", "formal",
"sizeFirm", "H_Head", "Head_Female",
"maxEducLevel_im", "cotPension_im","relab","oficio")
datos_sub <- datos[, variables_seleccionadas]
datos_sub <- datos_sub %>%
mutate(across(all_of(categorical_vars), as.character))
tabla3 <- as.data.frame(tabla$t)
# Variables numéricas
numeric_vars <- c("y_ingLab_m_ha_wins", "nmenores", "age")
# Variables categóricas
categorical_vars <- c("gender", "estrato1",  "sizeFirm", "maxEducLevel_im")
# Etiquetas de las variables
datos_sub$gender <- factor(datos_sub$gender,
levels = c(0, 1),
labels = c("Mujer", "Hombre"))
# estrato1: 1=Estrato 1, 2=Estrato 2, 3=Estrato 3, 4=Estrato 4, 5=Estrato 5, 6=Estrato 6
datos_sub$estrato1 <- factor(datos_sub$estrato1,
levels = c(1, 2, 3, 4, 5, 6),
labels = c("Estrato 1", "Estrato 2", "Estrato 3",
"Estrato 4", "Estrato 5", "Estrato 6"))
# sizeFirm: 1= self-employed, 2= 2-5 trabajadores, etc.
datos_sub$sizeFirm <- factor(datos_sub$sizeFirm,
levels = c(1, 2, 3, 4, 5),
labels = c("Self-employed",
"2-5 trabajadores",
"6-10 trabajadores",
"11-50 trabajadores",
">50 trabajadores"))
# maxEducLevel_im: 1=Ninguno, 2=Preescolar, etc.
datos_sub$maxEducLevel_im <- factor(datos_sub$maxEducLevel_im,
levels = c(1, 2, 3, 4, 5, 6, 7, 9),
labels = c("Ninguno",
"Preescolar",
"Primaria incompleta (1-4)",
"Primaria completa (5)",
"Secundaria incompleta (6-10)",
"Secundaria completa (11)",
"Terciario",
"N/A"))
library(ggplot2)
p <- ggplot(datos_sub, aes(x = "", y = age)) +
geom_boxplot(fill = "skyblue", outlier.shape = 16, outlier.alpha = 0.6) +
scale_y_continuous(limits = c(min(datos_sub$age, na.rm = TRUE),
max(datos_sub$age, na.rm = TRUE))) +
labs(
title = "Boxplot de Edad",
x = "",
y = "Edad"
) +
theme_minimal()
print(p)
ggsave("boxplot_edad.pdf", plot = p, device = "pdf", width = 6, height = 4)
#edad y sexo
boxplot(age ~ factor(gender, levels = c(1, 0), labels = c("Hombre", "Mujer")),
data = datos,
xlab = "Género",
ylab = "Edad (años)")
#ingreso por sexo
boxplot(y_ingLab_m_ha_wins ~ factor(gender, levels = c(1, 0), labels = c("Hombre", "Mujer")),
data = datos,
xlab = "Género",
ylab = "Ingreso laboral por hora(log)",
log = "y")
# Definir los cortes: de 18 a 22, 23 a 27, … hasta 93-94 (recordar que la edad máxima es 94)
breaks <- c(18, seq(23, 93, by = 5), 95)
labels_age <- paste(breaks[-length(breaks)], breaks[-1] - 1, sep = "-")
# Crear la variable categórica para edad
datos$age_cat <- cut(datos$age,
breaks = breaks,
right = FALSE,
labels = labels_age)
# Gráfico: Boxplot del ingreso laboral por hora (escala log10) por categoría de edad y género
ggplot(datos, aes(x = age_cat, y = y_ingLab_m_ha_wins,
fill = factor(gender, levels = c(1, 0), labels = c("Hombre", "Mujer")))) +
geom_boxplot() +
scale_y_continuous(trans = "log10") +
labs(x = "Edad (quinquenios)",
y = "Ingreso laboral por hora (log10)",
fill = "Género") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.minor = element_blank())
# Agrupar y calcular el ingreso laboral promedio por sexo y formalidad
tabla_sizefirm <- datos %>%
group_by(gender, sizeFirm) %>%
summarise(ingreso_mean = mean(y_ingLab_m_ha_wins, na.rm = TRUE)) %>%
ungroup() %>%
mutate(
gender_label = factor(gender, levels = c(1, 0), labels = c("Hombre", "Mujer")),
formal_label = factor(sizeFirm, levels = c(1, 0), labels = c("Formal", "Informal"))
)
# Gráfico de barras agrupado
ggplot(tabla_formalidad, aes(x = formal_label, y = ingreso_mean, fill = gender_label)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(x = "Formalidad",
y = "Ingreso laboral promedio",
title = "Ingreso laboral promedio según Sexo y Formalidad",
fill = "Género") +
theme_minimal()
# Tabla por gender
tabla_gender <- datos_sub %>%
group_by(gender) %>%
summarise(
edad_mean = mean(age, na.rm = TRUE),
edad_median = median(age, na.rm = TRUE),
ingreso_lab_hora_mean = mean(y_ingLab_m_ha_wins, na.rm = TRUE),
ingreso_lab_hora_mediana = median(y_ingLab_m_ha_wins, na.rm = TRUE)
)
print(tabla_gender)
print(xtable(tabla_gender), file = "tabla_gender.tex", type = "latex")
# Tabla por nivel educativo
tabla_nivel_educativo <- datos_sub %>%
group_by(maxEducLevel_im) %>%
summarise(
ingreso_lab_hora_mean = mean(y_ingLab_m_ha_wins, na.rm = TRUE),
ingreso_lab_hora_mediana = median(y_ingLab_m_ha_wins, na.rm = TRUE)
)
print(tabla_nivel_educativo)
print(xtable(tabla_nivel_educativo), file = "tabla_nivel_educativo.tex", type = "latex")
# Tabla por estrato1
tabla_estrato <- datos_sub %>%
group_by(estrato1) %>%
summarise(
ingreso_lab_hora_mean = mean(y_ingLab_m_ha_wins, na.rm = TRUE),
ingreso_lab_hora_mediana = median(y_ingLab_m_ha_wins, na.rm = TRUE)
)
print(tabla_estrato)
print(xtable(tabla_estrato), file = "tabla_estrato.tex", type = "latex")
boxplot(edad~sexo,
datos,
xlab="Sexo",
ylab="Edad (anos)",
xaxt="n")
axis(1, at=1:2,
labels=c("Hombre","Mujer"))
# Definir cortes y etiquetas para los grupos de edad a partir de 18 años
breaks <- c(18, seq(23, 95, by = 5), 95)
labels_age <- paste(breaks[-length(breaks)], breaks[-1] - 1, sep = "-")
View(sexo)
View(gender)
reg_p4_condicional <- lm(log_s2 ~ female+maxEducLevel_im+age+estrato1+oficio+nmenores, data = datos2)
datos2 <- datos2 %>%
mutate(female = ifelse(gender == 0, 1, 0))
datos2 <- datos%>% mutate(log_s2 = log(y_ingLab_m_ha_wins))
## La regresión
reg_p3 <- log_s2 ~ age + I(age^2)
modelo_p3_mean <- lm(reg_p3, data = datos1)
modelo_p3_median <- lm(reg_p3, data = datos2)
#Generacion de la tabla
stargazer(modelo_p3_mean, modelo_p3_median, type = "text", title = "Logaritmo del salario en funcion de la edad")
## Creamos las variables
datos1 <- datos%>% mutate(log_s2 = log(y_ingLab_m_ha_mean))
datos2 <- datos%>% mutate(log_s2 = log(y_ingLab_m_ha_wins))
## La regresión
reg_p3 <- log_s2 ~ age + I(age^2)
modelo_p3_mean <- lm(reg_p3, data = datos1)
modelo_p3_median <- lm(reg_p3, data = datos2)
#Generacion de la tabla
stargazer(modelo_p3_mean, modelo_p3_median, type = "text", title = "Logaritmo del salario en funcion de la edad")
# Sacando los coeficientes
modelo_p3_mean$coefficients
modelo_p3_median$coefficients
## Revisando el ajuste intramodelo
log_s_hat_mean  <- predict(modelo_p3_mean, newdata = datos1)
log_s_hat_median <- predict(modelo_p3_median, newdata = datos2)
print(c(MSE_p3_mean = mean((datos1$log_s2 - log_s_hat_mean)^2), MSE_p3_median = mean((datos2$log_s2 - log_s_hat_median)^2)))
## Gráfica - Punto más alto de ingreso estimado según edad
ggplot(datos2, aes(x = age, y = log_s_hat_median)) +
geom_point(color = "blue", alpha = 0.6) +  # Puntos en azul con transparencia
geom_vline(xintercept = 50, color = "red", linetype = "dashed", size = 1) +  # Línea vertical roja en x = 50
# geom_smooth(method = "lm", color = "red", se = TRUE) +  # Línea de tendencia opcional
labs(title = "Relación entre Edad y el Logaritmo de los Ingresos",
x = "Edad",
y = "Log(Ingresos)") +
theme_minimal()
## Calculamos con bootstrap el valor máximo de los ingresos.
# Primero creamos la función
peak_age_f2<-function(datos2,index){
modelo_p3 <- lm(log_s2 ~ age + I(age^2), data = datos2, subset = index)
b2s <- coef(modelo_p3)[2]
b3s <- coef(modelo_p3)[3]
age_max_s <- -b2s/(2*b3s)  #Esto sale de derivar la ecuacion e igualar a 0 en base a los coeficientes estimados
return(age_max_s)
}
peak_age_f2(datos2,1:nrow(datos2))  #Probando la funcion
##Finalmente hacemos la simulación
set.seed(10101)
boot_p3_s <- boot(data = datos2, peak_age_f2, R = 1000)
boot_p3_s
boot.ci(boot_p3_s, type = c("perc", "bca")) #Esta funcion me saca los intervalos de confianza al 95% bajo dos metodologias
datos2 <- datos2 %>%
mutate(female = ifelse(gender == 0, 1, 0))
reg_p4 <- log_s2~female
modelo_p4_1 <- lm(log_s2~female, data=datos2)
stargazer(modelo_p4_1, type = "text", title = "Logaritmo del salario en funcion del genero")
reg_p4_condicional <- lm(log_s2 ~ female+maxEducLevel_im+age+estrato1+oficio+nmenores, data = datos2)
stargazer(reg_p4_condicional, type = "text", title = "Logaritmo del salario en funcion del genero")
stargazer(modelo_p4_1, type = "text", title = "Logaritmo del salario en funcion del genero")
#Generacion de la tabla
stargazer(modelo_p3_mean, modelo_p3_median, type = "text", title = "Logaritmo del salario en funcion de la edad")
reg_p4_condicional <- lm(mm ~ female+maxEducLevel_im+age+estrato1+oficio+nmenores, data = datos2)
# x1 es la variable female
# x2 son los controles que corresponden a: edad y estrato
mm=log(y_ingLab_m_ha_mean)
reg_p4_condicional <- lm(mm ~ female+maxEducLevel_im+age+estrato1+oficio+nmenores, data = datos2)
